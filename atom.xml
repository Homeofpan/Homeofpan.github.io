<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Homeofpan.github.io/"/>
  <updated>2019-10-11T07:53:30.827Z</updated>
  <id>http://Homeofpan.github.io/</id>
  
  <author>
    <name>pan tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring事务的传播行为</title>
    <link href="http://Homeofpan.github.io/2019/10/11/spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/"/>
    <id>http://Homeofpan.github.io/2019/10/11/spring事务的传播行为/</id>
    <published>2019-10-11T07:49:32.000Z</published>
    <updated>2019-10-11T07:53:30.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事务传播行为介绍"><a href="#事务传播行为介绍" class="headerlink" title="事务传播行为介绍"></a>事务传播行为介绍</h3><h2 id="Spring中的7个事务传播行为"><a href="#Spring中的7个事务传播行为" class="headerlink" title="Spring中的7个事务传播行为:"></a>Spring中的7个事务传播行为:</h2><p>事务行为    说明<br>PROPAGATION_REQUIRED    支持当前事务，假设当前没有事务。就新建一个事务<br>PROPAGATION_SUPPORTS    支持当前事务，假设当前没有事务，就以非事务方式运行<br>PROPAGATION_MANDATORY    支持当前事务，假设当前没有事务，就抛出异常<br>PROPAGATION_REQUIRES_NEW    新建事务，假设当前存在事务。把当前事务挂起<br>PROPAGATION_NOT_SUPPORTED    以非事务方式运行操作。假设当前存在事务，就把当前事务挂起<br>PROPAGATION_NEVER    以非事务方式运行，假设当前存在事务，则抛出异常<br>PROPAGATION_NESTED    如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</p><h2 id="Spring异常事务处理机制"><a href="#Spring异常事务处理机制" class="headerlink" title="Spring异常事务处理机制:"></a>Spring异常事务处理机制:</h2><p>1、事务注解一般用在业务层</p><p>2、在业务逻辑中抛出的异常若是被try-catch了，事务是无法回滚的，所以正确的操作是在遇到异常场景需要回滚时，手动抛出RuntimeException(默认情况下Spring 中的事务处理只对RuntimeException 方法进行回滚，所以，如果<br>将Runtime Exception 替换成普通的Exception 不会产生回滚效果。 )</p><p>3、spring中的事务是以AOP为基础的，是应用代理模式实现的</p><p>4、Spring实现事务时，提取事务标签的顺序为：方法事务声明–&gt;方法所在类事务声明–&gt;接口方法事务声明–&gt;接口方法所在类事务声明</p><p>5、对于事务处理，最重要的是要获取事务对应的属性，如果没有事务对应的属性值，事务将无从处理，事务的所有信息从创建事务开始就保存在transactionInfo中，包括事务回滚都要依赖该信息进行处理。</p><p>6、事务回滚处理(Spring处理异常事务机制）</p><pre><code>(1)事务回滚条件    Spring事务异常处理机制只会对RuntimeException 和Error 级别的异常执行回滚操作，执行具体回滚的函数如下：   public boolean rollbackOn(Throwable ex) {                return (ex instanceof RuntimeException || ex instanceof Error);   }  当然我们可以对上述两种类型的异常进行扩展处理，达到自己对指定常的回滚，并利用注解的方式实现 @Transactional(rollbackFor =  xxxException.class)(2)事务回滚处理 两步：    触发器监听函数      执行真正的回滚操作，在执行回滚操作的时候要考虑是否有嵌套事务（根据       savePoint来判断，若有嵌套事务，则对嵌套事务单独进行回滚，不回滚外事务。）(3) 回滚后的信息清除   无论事务是否回滚成功都必须执行     设置事务状态为完成，避免事务重复执行     如果当前事务是新的同步状态，则将事务信息从当前线程中清除掉     释放事务占用的资源(数据库连接资源等)    如果在当前事务事前有事务挂起，需要将挂起的事务恢复</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事务传播行为介绍&quot;&gt;&lt;a href=&quot;#事务传播行为介绍&quot; class=&quot;headerlink&quot; title=&quot;事务传播行为介绍&quot;&gt;&lt;/a&gt;事务传播行为介绍&lt;/h3&gt;&lt;h2 id=&quot;Spring中的7个事务传播行为&quot;&gt;&lt;a href=&quot;#Spring中的7个事务传
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://Homeofpan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring" scheme="http://Homeofpan.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Mysql的加锁分析情况</title>
    <link href="http://Homeofpan.github.io/2019/10/11/Mysql%E7%9A%84%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90%E6%83%85%E5%86%B5/"/>
    <id>http://Homeofpan.github.io/2019/10/11/Mysql的加锁分析情况/</id>
    <published>2019-10-11T06:38:35.000Z</published>
    <updated>2019-10-11T07:24:22.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引和锁的分析"><a href="#索引和锁的分析" class="headerlink" title="索引和锁的分析"></a><strong>索引和锁的分析</strong></h1><p>依旧，基于InnoDB</p><h2 id="再补充一点前提"><a href="#再补充一点前提" class="headerlink" title="再补充一点前提"></a><strong>再补充一点前提</strong></h2><h3 id="1-2PL：Two-Phase-Locking"><a href="#1-2PL：Two-Phase-Locking" class="headerlink" title="1.2PL：Two-Phase Locking"></a>1.2PL：Two-Phase Locking</h3><p>传统RDBMS加锁的一个原则，就是2PL (二阶段锁)：Two-Phase Locking。相对而言，2PL比较容易理解，说的是锁操作分为两个阶段：加锁阶段与解锁阶段，并且保证加锁阶段与解锁阶段不相交。下面，仍旧以MySQL为例，来简单看看2PL在MySQL中的实现。 <img src="http://irats.cn:8888/group1/M00/00/00/rBECIl1eEnGAH-UXAACZSj41twA342.jpg" alt="二阶段锁"></p><p>2PL就是将加锁/解锁分为两个完全不相交的阶段。加锁阶段：只加锁，不放锁。解锁阶段：只放锁，不加锁。</p><h2 id="2-Isolation-Level（事务级别）"><a href="#2-Isolation-Level（事务级别）" class="headerlink" title="2.Isolation Level（事务级别）"></a>2.Isolation Level（事务级别）</h2><p>隔离级别：Isolation Level，也是RDBMS的一个关键特性。 MySQL/InnoDB定义的4种隔离级别： •    Read Uncommited 可以读取未提交记录。此隔离级别，基本不会使用。</p><p>•    Read Committed (RC) 快照读忽略，第一篇文章写的很清楚了。 针对当前读，RC隔离级别保证对读取到的记录加锁 (记录锁)，存在幻读现象。</p><p>•    Repeatable Read (RR) 快照读忽略，第一篇文章写的很清楚了。 针对当前读，RR隔离级别保证对读取到的记录加锁 (记录锁)，同时保证对读取的范围加锁，新的满足查询条件的记录不能够插入 (间隙锁)，不存在幻读现象。</p><p>•    Serializable 从MVCC并发控制退化为基于锁的并发控制。不区别快照读与当前读，所有的读操作均为当前读，读加读锁 (S锁)，写加写锁 (X锁)。 Serializable隔离级别下，读写冲突，因此并发度急剧下降，不建议使用。</p><h2 id="简单SQL的加锁实现分析"><a href="#简单SQL的加锁实现分析" class="headerlink" title="简单SQL的加锁实现分析"></a><strong>简单SQL的加锁实现分析</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">•SQL1：select * from t1 where id = 10;</span><br><span class="line">•SQL2：delete from t1 where id = 10;</span><br></pre></td></tr></table></figure><p>对于上面两条sql语句，需要分析则必须明确下面几点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">•一：id列是不是主键？</span><br><span class="line">•二：当前系统的隔离级别是什么？</span><br><span class="line">•三：id列如果不是主键，那么id列上有索引吗？</span><br><span class="line">•四：id列上如果有二级索引，那么这个索引是唯一索引吗？</span><br><span class="line">•五：两个SQL的执行计划是什么？索引扫描？全表扫描？</span><br></pre></td></tr></table></figure><p>没有给定上述几点，分析都是假的 根据上面的条件，将sql分为如下组合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">•组合一：id列是主键，RC隔离级别</span><br><span class="line">•组合二：id列是二级唯一索引，RC隔离级别</span><br><span class="line">•组合三：id列是二级非唯一索引，RC隔离级别</span><br><span class="line">•组合四：id列上没有索引，RC隔离级别</span><br><span class="line">•组合五：id列是主键，RR隔离级别</span><br><span class="line">•组合六：id列是二级唯一索引，RR隔离级别</span><br><span class="line">•组合七：id列是二级非唯一索引，RR隔离级别</span><br><span class="line">•组合八：id列上没有索引，RR隔离级别</span><br><span class="line">•组合九：Serializable隔离级别</span><br></pre></td></tr></table></figure><p>下面开始分析：</p><h3 id="组合一：id主键-RC"><a href="#组合一：id主键-RC" class="headerlink" title="组合一：id主键+RC"></a><strong>组合一：id主键+RC</strong></h3><p>id是主键，Read Committed隔离级别，给定SQL：delete from t1 where id = 10; 只需要将主键上，id = 10的记录加上X锁即可。如下图所示： <img src="http://irats.cn:8888/group1/M00/00/00/rBECIl1eFVyAU3G8AACB0n3pKWY418.jpg" alt="id主键+RC"></p><p><strong>结论：</strong> id是主键时，此SQL只需要在id=10这条记录上加X锁即可。</p><h3 id="组合二：id唯一索引-RC"><a href="#组合二：id唯一索引-RC" class="headerlink" title="组合二：id唯一索引+RC"></a><strong>组合二：id唯一索引+RC</strong></h3><p>id不是主键，而是一个Unique的二级索引键值。那么在RC隔离级别下，delete from t1 where id = 10; 需要加什么锁呢？见下图： <img src="http://irats.cn:8888/group1/M00/00/00/rBECIl1eFaaAAuTTAACTl8kxySw303.jpg" alt="id唯一索引+RC"></p><p>此组合中，id是unique索引，而主键是name列。此时，加锁的情况由于组合一有所不同。由于id是unique索引，因此delete语句会选择走id列的索引进行where条件的过滤，在找到id=10的记录后，首先会将unique索引上的id=10索引记录加上X锁，同时，会根据读取到的name列，回主键索引(聚簇索引)，然后将聚簇索引上的name = ‘d’ 对应的主键索引项加X锁。为什么聚簇索引上的记录也要加锁？试想一下，如果并发的一个SQL，是通过主键索引来更新：update t1 set id = 100 where name = ‘d’; 此时，如果delete语句没有将主键索引上的记录加锁，那么并发的update就会感知不到delete语句的存在，违背了同一记录上的更新/删除需要串行执行的约束。</p><p><strong>结论：</strong> 若id列是unique列，其上有unique索引。那么SQL需要加两个X锁，一个对应于id unique索引上的id = 10的记录，另一把锁对应于聚簇索引上的[name=’d’,id=10]的记录。</p><h3 id="组合三：id非唯一索引-RC"><a href="#组合三：id非唯一索引-RC" class="headerlink" title="组合三：id非唯一索引+RC"></a><strong>组合三：id非唯一索引+RC</strong></h3><p>id列上的约束相比组合一、二 又降低了，id不再是唯一列，只有一个普通索引。假设delete from t1 where id = 10; 语句，仍旧选择id列上的索引进行过滤where条件，那么此时会持有哪些锁？同样见下图： <img src="http://irats.cn:8888/group1/M00/00/00/rBECIl1eFm2AHi6yAACXA5-E1HY180.jpg" alt="id非唯一索引+RC"></p><p>可以看出，首先，id列索引上，满足id=10的查询条件的记录，均已加上锁。同时，这些记录对应的主键索引上的记录也都加上所。与组合二唯一的区别在于，组合二最多只有一个满足等值查询的记录，二组合三会将所有满足查询的记录都加锁。</p><p><strong>结论：</strong> 若id列上有非唯一索引，那么对应的所有满足SQL查询条件的记录，都会被加锁。同时，这些记录在主键索引上的记录，也会被加锁。</p><h3 id="组合四：id无索引-RC"><a href="#组合四：id无索引-RC" class="headerlink" title="组合四：id无索引+RC"></a><strong>组合四：id无索引+RC</strong></h3><p>相对于前面三个组合，这是一个比较特殊的情况。id列上没有索引，where id = 10;这个过滤条件，没法通过索引进行过滤，那么只能走全表扫描做过滤。对应于这个组合，SQL会加什么锁？或者是换句话说，全表扫描时，会加什么锁？这个答案也有很多：有人说会在表上加X锁；有人说会将聚簇索引上，选择出来的id = 10;的记录加上X锁。那么实际情况呢？请看下图： <img src="http://irats.cn:8888/group1/M00/00/00/rBECIl1eFxaAHv5CAACbIC-obTo771.jpg" alt="id无索引+RC"></p><p>由于id列上没有索引，因此只能走聚簇索引，进行全部扫描。从图中可以看到，满足删除条件的记录有两条，但是，聚簇索引上所有的记录，都被加上了X锁。无论记录是否满足条件，全部被加上X锁。既不是加表锁，也不是在满足条件的记录上加行锁。</p><p>有人可能会问？为什么不是只在满足条件的记录上加锁呢？这是由于MySQL的实现决定的。如果一个条件无法通过索引快速过滤，那么存储引擎层面就会将所有记录加锁后返回，然后由MySQL Server层进行过滤。因此也就把所有的记录，都锁上了。</p><p><strong>注：</strong> 在实际的实现中，MySQL有一些改进，在MySQL Server过滤条件，发现不满足后，会调用unlock_row方法，把不满足条件的记录放锁 (违背了2PL的约束)。这样做，保证了最后只会持有满足条件记录上的锁，但是每条记录的加锁操作还是不能省略的。</p><p><strong>结论：</strong> 若id列上没有索引，SQL会走聚簇索引的全扫描进行过滤，由于过滤是由MySQL Server层面进行的。因此每条记录，无论是否满足条件，都会被加上X锁。但是，为了效率考量，MySQL做了优化，对于不满足条件的记录，会在判断后放锁，最终持有的，是满足条件的记录上的锁，但是不满足条件的记录上的加锁/放锁动作不会省略。同时，优化也违背了2PL的约束。</p><hr><h3 id="组合五：id主键-RR"><a href="#组合五：id主键-RR" class="headerlink" title="组合五：id主键+RR"></a><strong>组合五：id主键+RR</strong></h3><p>上面的四个组合，都是在Read Committed隔离级别下的加锁行为，接下来的四个组合，是在Repeatable Read隔离级别下的加锁行为。 组合五，id列是主键列，Repeatable Read隔离级别，针对delete from t1 where id = 10; 这条SQL，加锁与组合一：[id主键，Read Committed]一致。</p><h3 id="组合六：id唯一索引-RR"><a href="#组合六：id唯一索引-RR" class="headerlink" title="组合六：id唯一索引+RR"></a><strong>组合六：id唯一索引+RR</strong></h3><p>与组合五类似，组合六的加锁，与组合二：[id唯一索引，Read Committed]一致。两个X锁，id唯一索引满足条件的记录上一个，对应的聚簇索引上的记录一个。</p><h3 id="组合七：id非唯一索引-RR"><a href="#组合七：id非唯一索引-RR" class="headerlink" title="组合七：id非唯一索引+RR"></a><strong>组合七：id非唯一索引+RR</strong></h3><p>是否记得上面所提的隔离级别，RC隔离级别允许幻读，而RR隔离级别不允许幻读。如果对脏读、幻读、可重复度等不清楚的话，有空再来写关于这几个读的区别。</p><p>现在简单说下幻读：如果一个事务第一次进行当前读id=10读取到三条数据，第二次进行当前读之前，其他事物插入了一条id=10的数据，第二次当前读id=10就会有四条数据，这就是幻读，就好像第一次出现了幻觉，第二次明明是四条，第一次怎么是三条？</p><p>组合七，Repeatable Read隔离级别，id上有一个非唯一索引，执行delete from t1 where id = 10; 假设选择id列上的索引进行条件过滤，最后的加锁行为，是怎么样的呢？同样看下面这幅图: <img src="http://irats.cn:8888/group1/M00/00/00/rBECIl1eGTiABq3wAACP_3bsPjw465.jpg" alt="id非唯一索引+RR"></p><p>此图，相对于组合三：[id列上非唯一锁，Read Committed]看似相同，其实却有很大的区别。最大的区别在于，这幅图中多了一个GAP锁，而且GAP锁看起来也不是加在记录上的，倒像是加载两条记录之间的位置，GAP锁有何用？</p><p><strong>注：</strong> GAP锁也叫间隙锁，有空再解释</p><p>其实这个多出来的GAP锁，就是RR隔离级别，相对于RC隔离级别，不会出现幻读的关键。确实，GAP锁锁住的位置，也不是记录本身，而是两条记录之间的GAP。所谓幻读，就是同一个事务，连续做两次当前读 (例如：select * from t1 where id = 10 for update;)，那么这两次当前读返回的是完全相同的记录 (记录数量一致，记录本身也一致)，第二次的当前读，不会比第一次返回更多的记录 (幻象)。</p><p>如何保证两次当前读返回一致的记录，那就需要在第一次当前读与第二次当前读之间，其他的事务不会插入新的满足条件的记录并提交。为了实现这个功能，GAP锁应运而生。</p><p>如图中所示，有哪些位置可以插入新的满足条件的项 (id = 10)，考虑到B+树索引的有序性，满足条件的项一定是连续存放的。记录[6,c]之前，不会插入id=10的记录；[6,c]与[10,b]间可以插入[10, aa] <strong>(注意,这里的间隙锁锁住了id=7,8,9,10,如果插入id为6和11的数据是可以的)</strong> ；[10,b]与[10,d]间，可以插入新的[10,bb],[10,c]等；[10,d]与[11,f]间可以插入满足条件的[10,e],[10,z]等；而[11,f]之后也不会插入满足条件的记录。因此，为了保证[6,c]与[10,b]间，[10,b]与[10,d]间，[10,d]与[11,f]不会插入新的满足条件的记录，MySQL选择了用GAP锁，将这三个GAP给锁起来。</p><p>Insert操作，如insert [10,aa]，首先会定位到[6,c]与[10,b]间，然后在插入前，会检查这个GAP是否已经被锁上，如果被锁上，则Insert不能插入记录。因此，通过第一遍的当前读，不仅将满足条件的记录锁上 (X锁)，与组合三类似。同时还是增加3把GAP锁，将可能插入满足条件记录的3个GAP给锁上，保证后续的Insert不能插入新的id=10的记录，也就杜绝了同一事务的第二次当前读，出现幻象的情况。</p><blockquote><p>现在有个问题：为什么组合五、六不加GAP锁？<br>答案很简单，因为组合五、六只会查出一条数据，不存在查询出多条的情况，所以不需要GAP锁</p></blockquote><blockquote><p>再来个问题：如果组合五、六中进行当前读：<br>select * from user where id = 8 for update<br>但是id=8的数据并不存在，那么GAP锁会不会出来现？</p></blockquote><p>下面用实验来说明<br><strong>组合五，id为主键，RR隔离级别</strong><br>Client A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</span><br><span class="line">- 结果</span><br><span class="line">| id | name |</span><br><span class="line">|  3 | zz   |</span><br><span class="line">|  6 | e    |</span><br><span class="line">| 10 | b    |</span><br><span class="line">| 11 | d    |</span><br><span class="line">| 13 | z    |</span><br><span class="line"></span><br><span class="line">-关闭自动提交事务</span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>Client B</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'f'</span>); - success</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'f'</span>); - blocked</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'f'</span>); - success</span><br></pre></td></tr></table></figure><p>Client A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>可以发现锁的范围是id:[7,9]<br><strong>组合六，id为唯一索引，RR隔离级别</strong><br>Client A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</span><br><span class="line">- 结果</span><br><span class="line">| id | name |</span><br><span class="line">|  3 | zz   |</span><br><span class="line">|  6 | e    |</span><br><span class="line">| 10 | b    |</span><br><span class="line">| 11 | d    |</span><br><span class="line">| 13 | z    |</span><br><span class="line"></span><br><span class="line">-关闭自动提交事务</span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>Client B</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'f'</span>); - blocked</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'f'</span>); - blocked</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'f'</span>); - blocked</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'f'</span>); - success</span><br></pre></td></tr></table></figure><p>Client A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>可以发现锁的范围是id:[7-9]</p><p><strong>总结：</strong> 当id为聚簇索引（主键）时和当id为唯一索引时进行当前读不存在的数据，就会来个GAP锁，锁住一个范围</p><blockquote><p>现在在又一个问题：<br>在当前组合id非唯一索引+RR，如果select * from test where id = 8 for update,id=8的数据并不存在</p></blockquote><p>实验分析： Client A：关闭事务自动提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</span><br><span class="line">- 结果</span><br><span class="line">| id | name |</span><br><span class="line">|  3 | zz   |</span><br><span class="line">|  6 | e    |</span><br><span class="line">| 10 | b    |</span><br><span class="line">| 11 | d    |</span><br><span class="line">| 13 | z    |</span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>Client B：自动提交事务的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">7</span>/<span class="number">8</span>/<span class="number">9</span> <span class="keyword">for</span> <span class="keyword">update</span>; -返回空，并不blocked</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">6</span> <span class="keyword">for</span> <span class="keyword">update</span>; -返回空，并不blocked</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">11</span> <span class="keyword">for</span> <span class="keyword">update</span>; -返回空，并不blocked</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">7</span>/<span class="number">8</span>/<span class="number">9</span>; -直接返回删除成功，这三条数据本来就不存在</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">test</span> <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'bb'</span> <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">7</span>/<span class="number">8</span>/<span class="number">9</span>; -直接返回更新成功，但是这些数据并不存在</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span>(<span class="number">7</span>/<span class="number">8</span>/<span class="number">9</span>,<span class="string">'aaa'</span>); -blocked</span><br><span class="line"></span><br><span class="line">-可以看出，我们同样用<span class="keyword">select</span> <span class="keyword">for</span> <span class="keyword">update</span>查询<span class="number">7</span>、<span class="number">8</span>、<span class="number">9</span>是不会被阻塞的，<span class="keyword">delete</span>、updater操作不存在的数据同样也不会被阻塞</span><br><span class="line">-可是之前不是说了<span class="keyword">select</span> <span class="keyword">for</span> <span class="keyword">update</span>会加X锁吗？</span><br><span class="line">-仅仅是使用<span class="keyword">Insert</span>等语句就会被阻塞</span><br><span class="line">-所以我们给个假设：如果<span class="keyword">select</span> <span class="keyword">for</span> <span class="keyword">update</span>查询不存在的索引，加的不是X锁，而是S锁</span><br><span class="line">-下面继续实验，</span><br></pre></td></tr></table></figure><p>Client A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'aaa'</span>);</span><br></pre></td></tr></table></figure><p>Client B</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>; -blocked</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">7</span> <span class="keyword">for</span> <span class="keyword">update</span>; -返回空</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span> <span class="keyword">for</span> <span class="keyword">update</span>; -返回空</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'aaa'</span>); -blocked</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'aaa'</span>); -blocked</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'aaa'</span>); -blocked</span><br><span class="line">-当A插入了id=8的数据后，id=8的数据立即被锁定：X锁</span><br><span class="line">-到这里，我们在补充下上面的假设</span><br><span class="line">-如果<span class="keyword">select</span> <span class="keyword">for</span> <span class="keyword">update</span>查询不存在的索引，加的不是X锁，而是S锁</span><br><span class="line">-如果<span class="keyword">insert</span>这条不存在的数据后，这条数据会立刻被<span class="keyword">insert</span>的客户端加以X锁以替代S锁</span><br></pre></td></tr></table></figure><p>Client A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>现在我们来证明下刚才的假设<br><strong>如果select for update查询不存在的索引，加的不是X锁，而是S锁，如果A客户端insert这条不存在的数据后，这条数据会立刻被insert的客户端加以X锁以替代S锁</strong></p><p>实验：恢复数据，将刚刚插入的id=8的数据删掉，重新实验<br>Client A ：关闭事务自动提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>Client B ：关闭事务自动提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>Client A ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'aaa'</span>); -blocked</span><br><span class="line">-进入阻塞了！！！前半段的假设成立了</span><br><span class="line">-如果<span class="keyword">select</span> <span class="keyword">for</span> <span class="keyword">update</span>查询不存在的索引，加的不是X锁，而是S锁</span><br></pre></td></tr></table></figure><p>Client B：在上面A超时前提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>Client A数据插入成功，此时B再来尝试当前度id=8的数据<br>Client B</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>; - blocked</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">7</span> <span class="keyword">for</span> <span class="keyword">update</span>; -返回空</span><br></pre></td></tr></table></figure><p>假设完全成立了。B会被阻塞，说明A对id=8的数据加以X锁， 但是对于id=7这个不存在的数据，是能够读取的，仍然是S锁.</p><p><strong>在id为非唯一索引，RR隔离级别下，如果select for update查询不存在的索引，加的GAP锁不是X锁类型的，而是S锁类型的，如果A客户端insert这条不存在的数据后，这条数据会立刻被insert的客户端加以X锁以替代S锁，简单来说，GAP对于不存在的数据加的是S锁，对存在的数据加的是X锁</strong><br><strong>如果是使用delete和update语句操作不存在的id数据项，会直接操作成功，因为本来就没什么好操作的</strong></p><p>结论：Repeatable Read隔离级别下，id列上有一个非唯一索引，对应SQL：delete from t1 where id = 10; 首先，通过id索引定位到第一条满足查询条件的记录，加记录上的X锁，加GAP上的GAP锁，然后加主键聚簇索引上的记录X锁，然后返回；然后读取下一条，重复进行。直至进行到第一条不满足条件的记录[11,f]，此时，不需要加记录X锁，但是仍旧需要加GAP锁，最后返回结束。</p><h3 id="组合八：id无索引-RR"><a href="#组合八：id无索引-RR" class="headerlink" title="**组合八：id无索引+RR"></a><strong>**组合八：id无索引+RR</strong></h3><p>组合八，Repeatable Read隔离级别下的最后一种情况，id列上没有索引。此时SQL：delete from t1 where id = 10; 没有其他的路径可以选择，只能进行全表扫描。最终的加锁情况，如下图所示： <img src="http://irats.cn:8888/group1/M00/00/00/rBECIl1eHwGAZlqXAAC8aV4ARTs433.jpg" alt="id无索引+RR"></p><p>如图，这是一个很恐怖的现象。首先，聚簇索引上的所有记录，都被加上了X锁。其次，聚簇索引每条记录间的间隙(GAP)，也同时被加上了GAP锁。这个示例表，只有6条记录，一共需要6个记录锁，7个GAP锁。试想，如果表上有1000万条记录呢？</p><p>在这种情况下，这个表上，除了不加锁的快照度，其他任何加锁的并发SQL，均不能执行，不能更新，不能删除，不能插入，全表被锁死。</p><p>当然，跟组合四：[id无索引, Read Committed]类似，这个情况下，MySQL也做了一些优化，就是所谓的semi-consistent read。semi-consistent read开启的情况下，对于不满足查询条件的记录，MySQL会提前放锁。针对上面的这个用例，就是除了记录[d,10]，[g,10]之外，所有的记录锁都会被释放，同时不加GAP锁。semi-consistent read如何触发：要么是read committed隔离级别；要么是Repeatable Read隔离级别，同时设置了 innodb_locks_unsafe_for_binlog 参数。</p><p>结论：在Repeatable Read隔离级别下，如果进行全表扫描的当前读，那么会锁上表中的所有记录，同时会锁上聚簇索引内的所有GAP，杜绝所有的并发 更新/删除/插入 操作。当然，也可以通过触发semi-consistent read，来缓解加锁开销与并发影响，但是semi-consistent read本身也会带来其他问题，不建议使用。</p><h3 id="组合九：Serializable"><a href="#组合九：Serializable" class="headerlink" title="组合九：Serializable"></a><strong>组合九：Serializable</strong></h3><p>针对前面提到的简单的SQL，最后一个情况：Serializable隔离级别。对于SQL2：delete from t1 where id = 10; 来说，Serializable隔离级别与Repeatable Read隔离级别完全一致，因此不做介绍。 Serializable隔离级别，影响的是SQL1：select * from t1 where id = 10; 这条SQL，在RC，RR隔离级别下，都是快照读，不加锁。但是在Serializable隔离级别，SQL1会加读锁，也就是说快照读不复存在，MVCC并发控制降级为Lock-Based CC。 结论：在MySQL/InnoDB中，所谓的读不加锁，并不适用于所有的情况，而是隔离级别相关的。Serializable隔离级别，读不加锁就不再成立，所有的读操作，都是当前读。</p><h3 id="四、死锁原理与分析"><a href="#四、死锁原理与分析" class="headerlink" title="四、死锁原理与分析"></a><strong>四、死锁原理与分析</strong></h3><p>本文前面的部分，基本上已经涵盖了MySQL/InnoDB所有的加锁规则。深入理解MySQL如何加锁，有两个比较重要的作用：</p><ul><li>可以根据MySQL的加锁规则，写出不会发生死锁的SQL；</li></ul><ul><li>可以根据MySQL的加锁规则，定位出线上产生死锁的原因；</li></ul><p>下面，来看看两个死锁的例子 (一个是两个Session的两条SQL产生死锁；另一个是两个Session的一条SQL，产生死锁)：</p><p><a href="http://officialblog-wordpress.stor.sinaapp.com/uploads/2013/12/medish-10.jpg" target="_blank" rel="noopener"><img src="http://officialblog-wordpress.stor.sinaapp.com/uploads/2013/12/medish-10.jpg" alt="medish (10)"></a></p><p><a href="http://officialblog-wordpress.stor.sinaapp.com/uploads/2013/12/medish-11.jpg" target="_blank" rel="noopener"><img src="http://officialblog-wordpress.stor.sinaapp.com/uploads/2013/12/medish-11.jpg" alt="medish (11)"></a></p><p>上面的两个死锁用例。第一个非常好理解，也是最常见的死锁，每个事务执行两条SQL，分别持有了一把锁，然后加另一把锁，产生死锁。</p><p>第二个用例，虽然每个Session都只有一条语句，仍旧会产生死锁。要分析这个死锁，首先必须用到本文前面提到的MySQL加锁的规则。针对Session 1，从name索引出发，读到的[hdc, 1]，[hdc, 6]均满足条件，不仅会加name索引上的记录X锁，而且会加聚簇索引上的记录X锁，加锁顺序为先[1,hdc,100]，后[6,hdc,10]。而Session 2，从pubtime索引出发，[10,6],[100,1]均满足过滤条件，同样也会加聚簇索引上的记录X锁，加锁顺序为[6,hdc,10]，后[1,hdc,100]。发现没有，跟Session 1的加锁顺序正好相反，如果两个Session恰好都持有了第一把锁，请求加第二把锁，死锁就发生了。</p><p><strong>结论：</strong>死锁的发生与否，并不在于事务中有多少条SQL语句，<strong>死锁的关键在于</strong>：两个(或以上)的Session<strong>加锁的顺序</strong>不一致。而使用本文上面提到的，分析MySQL每条SQL语句的加锁规则，分析出每条语句的加锁顺序，然后检查多个并发SQL间是否存在以相反的顺序加锁的情况，就可以分析出各种潜在的死锁情况，也可以分析出线上死锁发生的原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;索引和锁的分析&quot;&gt;&lt;a href=&quot;#索引和锁的分析&quot; class=&quot;headerlink&quot; title=&quot;索引和锁的分析&quot;&gt;&lt;/a&gt;&lt;strong&gt;索引和锁的分析&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;依旧，基于InnoDB&lt;/p&gt;
&lt;h2 id=&quot;再补充一点前提&quot;&gt;
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://Homeofpan.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://Homeofpan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>当前读与快照读的区别</title>
    <link href="http://Homeofpan.github.io/2019/10/09/%E5%BD%93%E5%89%8D%E8%AF%BB%E4%B8%8E%E5%BF%AB%E7%85%A7%E8%AF%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://Homeofpan.github.io/2019/10/09/当前读与快照读的区别/</id>
    <published>2019-10-09T07:07:41.000Z</published>
    <updated>2019-10-11T04:02:11.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基于Innodb存储引擎的快照读与当前读分析"><a href="#基于Innodb存储引擎的快照读与当前读分析" class="headerlink" title="基于Innodb存储引擎的快照读与当前读分析:"></a>基于Innodb存储引擎的快照读与当前读分析:</h3><h2 id="1-MVCC"><a href="#1-MVCC" class="headerlink" title="1.MVCC"></a>1.MVCC</h2><p>MySQL InnoDB存储引擎 ，实现的是基于多版本的并发控制协议——MVCC (Multi-Version Concurrency Control) (注：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。MVCC最大的好处：读不加锁，读写不冲突。 在MVCC并发控制中，读操作可以分成两类：快照读 (snapshot read)与当前读 (current read)。快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</p><h2 id="快照读与当前读"><a href="#快照读与当前读" class="headerlink" title="快照读与当前读"></a>快照读与当前读</h2><ul><li><strong>快照读:</strong>最简单的select操作,属于快照读,不加锁<br>select * from table where id = 1;</li><li><strong>当前读:</strong>特殊的读与增删改操作,属于当前读,会读取数据库原本的数据,加锁<br>select * from table where xxx lock in share mode; (共享锁)<br>select * from table where xxx for update;<br>insert into table values()<br>update table set xxx where xxx<br>delete form table where xxx</li></ul><p>以上语句，都属于当前读，读取记录的最新版本。并且，读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。其中，除了第一条语句，对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)。</p><h3 id="下面以实例来详解快照读与当前读"><a href="#下面以实例来详解快照读与当前读" class="headerlink" title="下面以实例来详解快照读与当前读:"></a>下面以实例来详解快照读与当前读:</h3><p>在数据库中存在user表并且有4条数据</p><h3 id="1-select快照读-照片"><a href="#1-select快照读-照片" class="headerlink" title="1.select快照读(照片):"></a>1.select快照读(照片):</h3><h4 id="当你执行select-之后，在A与B事务中都会返回4条一样的数据，这是不用想的，当执行select的时候，innodb默认会执行快照读，相当于就是给你目前的状态找了一张照片，以后执行select-的时候就会返回当前照片里面的数据，当其他事务提交了也对你不造成影响，和你没关系，这就实现了可重复读了，那这个照片是什么时候生成的呢？不是开启事务的时候，是当你第一次执行select的时候，也就是说，当A开启了事务，然后没有执行任何操作，这时候B-insert了一条数据然后commit-这时候A执行-select，那么返回的数据中就会有B添加的那条数据……之后无论再有其他事务commit都没有关系，因为照片已经生成了，而且不会再生成了，以后都会参考这张照片。"><a href="#当你执行select-之后，在A与B事务中都会返回4条一样的数据，这是不用想的，当执行select的时候，innodb默认会执行快照读，相当于就是给你目前的状态找了一张照片，以后执行select-的时候就会返回当前照片里面的数据，当其他事务提交了也对你不造成影响，和你没关系，这就实现了可重复读了，那这个照片是什么时候生成的呢？不是开启事务的时候，是当你第一次执行select的时候，也就是说，当A开启了事务，然后没有执行任何操作，这时候B-insert了一条数据然后commit-这时候A执行-select，那么返回的数据中就会有B添加的那条数据……之后无论再有其他事务commit都没有关系，因为照片已经生成了，而且不会再生成了，以后都会参考这张照片。" class="headerlink" title="当你执行select *之后，在A与B事务中都会返回4条一样的数据，这是不用想的，当执行select的时候，innodb默认会执行快照读，相当于就是给你目前的状态找了一张照片，以后执行select 的时候就会返回当前照片里面的数据，当其他事务提交了也对你不造成影响，和你没关系，这就实现了可重复读了，那这个照片是什么时候生成的呢？不是开启事务的时候，是当你第一次执行select的时候，也就是说，当A开启了事务，然后没有执行任何操作，这时候B insert了一条数据然后commit,这时候A执行 select，那么返回的数据中就会有B添加的那条数据……之后无论再有其他事务commit都没有关系，因为照片已经生成了，而且不会再生成了，以后都会参考这张照片。"></a>当你执行select *之后，在A与B事务中都会返回4条一样的数据，这是不用想的，当执行select的时候，innodb默认会执行快照读，相当于就是给你目前的状态找了一张照片，以后执行select 的时候就会返回当前照片里面的数据，当其他事务提交了也对你不造成影响，和你没关系，这就实现了可重复读了，那这个照片是什么时候生成的呢？不是开启事务的时候，是当你第一次执行select的时候，也就是说，当A开启了事务，然后没有执行任何操作，这时候B insert了一条数据然后commit,这时候A执行 select，那么返回的数据中就会有B添加的那条数据……之后无论再有其他事务commit都没有关系，因为照片已经生成了，而且不会再生成了，以后都会参考这张照片。</h4><h3 id="测试-当前数据库表的数据如下"><a href="#测试-当前数据库表的数据如下" class="headerlink" title="测试:当前数据库表的数据如下:"></a>测试:当前数据库表的数据如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| id | name | phone       |</span><br><span class="line">|  1 | pan  | 12345678912 |</span><br><span class="line">|  2 | liu  | 12345678945 |</span><br><span class="line">|  3 | han  | 45678912354 |</span><br></pre></td></tr></table></figure><h3 id="ClientA"><a href="#ClientA" class="headerlink" title="ClientA:"></a>ClientA:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set autocommit = 0; //关闭自动事务提交</span><br><span class="line">select * from user;</span><br><span class="line">//此处查询的数据还是刚开始的那些数据,但此处A事务并没提交</span><br><span class="line">| id | name | phone       |</span><br><span class="line">|  1 | pan  | 12345678912 |</span><br><span class="line">|  2 | liu  | 12345678945 |</span><br><span class="line">|  3 | han  | 45678912354 |</span><br></pre></td></tr></table></figure><h3 id="ClientB"><a href="#ClientB" class="headerlink" title="ClientB:"></a>ClientB:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">insert into user(name,phone) values(&apos;sb&apos;,&apos;45678912345&apos;);   //自动提交事务B,插入了一条数据</span><br><span class="line">select * from user;</span><br><span class="line">//数据已经成功插入了</span><br><span class="line">| id | name | phone       |</span><br><span class="line">|  1 | pan  | 12345678912 |</span><br><span class="line">|  2 | liu  | 12345678945 |</span><br><span class="line">|  3 | han  | 45678912354 |</span><br><span class="line">|  4 | sb   | 45678912345 |</span><br></pre></td></tr></table></figure><h3 id="ClientA-1"><a href="#ClientA-1" class="headerlink" title="ClientA:"></a>ClientA:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//还处于上面的事务中</span><br><span class="line">select * from user;</span><br><span class="line">//此处查询的数据还是刚开始的那些数据,但此处A事务并没提交</span><br><span class="line">| id | name | phone       |</span><br><span class="line">|  1 | pan  | 12345678912 |</span><br><span class="line">|  2 | liu  | 12345678945 |</span><br><span class="line">|  3 | han  | 45678912354 |</span><br><span class="line">//现在提交事务</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="ClientA-2"><a href="#ClientA-2" class="headerlink" title="ClientA:"></a>ClientA:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select * from user;</span><br><span class="line">| id | name | phone       |</span><br><span class="line">|  1 | pan  | 12345678912 |</span><br><span class="line">|  2 | liu  | 12345678945 |</span><br><span class="line">|  3 | han  | 45678912354 |</span><br><span class="line">|  4 | sb   | 45678912345 |</span><br><span class="line">//更新为最新的数据,说明了在原来事务A中select查询时已经生成了一张快照,</span><br><span class="line">//在事务没有提交时,不管其他事务对该数据如何操作都不会受影响</span><br></pre></td></tr></table></figure><h3 id="2、update、insert、delete-当前读"><a href="#2、update、insert、delete-当前读" class="headerlink" title="2、update、insert、delete 当前读"></a>2、update、insert、delete 当前读</h3><p>  当你执行这几个操作的时候默认会执行当前读，也就是会读取最新的记录，也就是别的事务提交的数据你也可以看到，这样很好理解啊，假设你要update一个记录，另一个事务已经delete这条数据并且commit了，这样不是会产生冲突吗，所以你update的时候肯定要知道最新的信息啊。在这里介绍一下update的过程吧，首先会执行当前读，然后把返回的数据加锁，之后执行update。加锁是防止别的事务在这个时候对这条记录做什么，默认加的是排他锁，也就是你读都不可以，这样就可以保证数据不会出错了。但注意一点，就算你这里加了写锁，别的事务也还是能访问的，是不是很奇怪？数据库采取了一致性非锁定读，别的事务会去读取一个快照数据。<br>  innodb默认隔离级别是RR， 是通过MVVC来实现了，读方式有两种，执行select的时候是快照读，其余是当前读，所以，mvvc不能根本上解决幻读的情况</p><h3 id="测试-当前user表中有四条数据"><a href="#测试-当前user表中有四条数据" class="headerlink" title="测试:当前user表中有四条数据"></a>测试:当前user表中有四条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| id | name | phone       |</span><br><span class="line">|  1 | pan  | 12345678912 |</span><br><span class="line">|  2 | liu  | 12345678945 |</span><br><span class="line">|  3 | han  | 45678912354 |</span><br><span class="line">|  4 | sb   | 45678912345 |</span><br></pre></td></tr></table></figure><h3 id="ClientA-使用for-update来触发当前读"><a href="#ClientA-使用for-update来触发当前读" class="headerlink" title="ClientA:使用for update来触发当前读"></a>ClientA:使用for update来触发当前读</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id =3 for update;</span><br></pre></td></tr></table></figure><h3 id="ClientB-删除ClientA锁读取的那条数据"><a href="#ClientB-删除ClientA锁读取的那条数据" class="headerlink" title="ClientB:删除ClientA锁读取的那条数据"></a>ClientB:删除ClientA锁读取的那条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from user where id = 3;</span><br><span class="line">----B--会阻塞住,如果A长时间不释放锁的话B就超时</span><br></pre></td></tr></table></figure><h3 id="该实例证明了A执行的当前读是加了X-排它锁-锁"><a href="#该实例证明了A执行的当前读是加了X-排它锁-锁" class="headerlink" title="该实例证明了A执行的当前读是加了X(排它锁)锁;"></a>该实例证明了A执行的当前读是加了X(排它锁)锁;</h3><h3 id="MVCC实现的快照读与当前读的底层原理"><a href="#MVCC实现的快照读与当前读的底层原理" class="headerlink" title="MVCC实现的快照读与当前读的底层原理:"></a>MVCC实现的快照读与当前读的底层原理:</h3><h3 id="在MVCC中的会默认地帮数据表的每条行数据都加上两个隐藏属性列"><a href="#在MVCC中的会默认地帮数据表的每条行数据都加上两个隐藏属性列" class="headerlink" title="在MVCC中的会默认地帮数据表的每条行数据都加上两个隐藏属性列:"></a>在MVCC中的会默认地帮数据表的每条行数据都加上两个隐藏属性列:</h3><img src="http://106.15.204.187:8888/group1/M00/00/00/rBEKH12etoWAFFGyAAA7noQxWmI604.png" style="zoom:80%;"><p>这里要引入系统版本号,当一个新事务开始的时候就会将当前的系统版本号作为当前事务id,然后系统版本号就自增1,然后删除时间默认刚开始是Undefine.然后MVCC在(RR)的隔离级别下就能保证了快照读和当前读,下面就使用一个实例来说明:</p><h3 id="测试-当前student表中无数据"><a href="#测试-当前student表中无数据" class="headerlink" title="测试:当前student表中无数据"></a>测试:当前student表中无数据</h3><h3 id="系统版本号从1开始"><a href="#系统版本号从1开始" class="headerlink" title="系统版本号从1开始:"></a>系统版本号从1开始:</h3><h3 id="ClientA-往当前表中插入两条数据"><a href="#ClientA-往当前表中插入两条数据" class="headerlink" title="ClientA:往当前表中插入两条数据:"></a>ClientA:往当前表中插入两条数据:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into student(name) values(&apos;pan&apos;);</span><br><span class="line">insert into student(name) values(&apos;li&apos;);</span><br><span class="line">insert into student(name) values(&apos;it&apos;);</span><br></pre></td></tr></table></figure><h3 id="对应的三条数据的属性"><a href="#对应的三条数据的属性" class="headerlink" title="对应的三条数据的属性:"></a>对应的三条数据的属性:</h3><img src="http://106.15.204.187:8888/group1/M00/00/00/rBEKH12eu2WAM3l9AAA7Drw9GWs554.png" style="zoom:60%;"><h3 id="ClientB-1"><a href="#ClientB-1" class="headerlink" title="ClientB:"></a>ClientB:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin;</span><br><span class="line">select * from student; -------s1</span><br><span class="line">select * from student; -------s2</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="ClientC-在执行到事务id为2的事务的s1语句之后-就有第三个事务进来-执行如下操作"><a href="#ClientC-在执行到事务id为2的事务的s1语句之后-就有第三个事务进来-执行如下操作" class="headerlink" title="ClientC: 在执行到事务id为2的事务的s1语句之后,就有第三个事务进来,执行如下操作"></a>ClientC: 在执行到事务id为2的事务的s1语句之后,就有第三个事务进来,执行如下操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin;</span><br><span class="line">insert into student(name) values(&apos;s&apos;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><img src="http://106.15.204.187:8888/group1/M00/00/00/rBEKH12f5l2AAte2AAA17YNpAVM268.png" style="zoom:60%;"><h3 id="那么插入的id-4的这条数据的事务id就是当前系统版本号-也就是3-当事务B继续执行时时s2的语句进行查询的时候-由于只能查询出小于或等于当前事务id的数据-所以事务C所插入的数据是无法插查询到的"><a href="#那么插入的id-4的这条数据的事务id就是当前系统版本号-也就是3-当事务B继续执行时时s2的语句进行查询的时候-由于只能查询出小于或等于当前事务id的数据-所以事务C所插入的数据是无法插查询到的" class="headerlink" title="那么插入的id=4的这条数据的事务id就是当前系统版本号,也就是3.当事务B继续执行时时s2的语句进行查询的时候,由于只能查询出小于或等于当前事务id的数据,所以事务C所插入的数据是无法插查询到的."></a>那么插入的id=4的这条数据的事务id就是当前系统版本号,也就是3.当事务B继续执行时时s2的语句进行查询的时候,由于只能查询出小于或等于当前事务id的数据,所以事务C所插入的数据是无法插查询到的.</h3><h3 id="ClientD-当事务B执行完s1语句的查询之后-就有事务D进来对数据进行如下操作"><a href="#ClientD-当事务B执行完s1语句的查询之后-就有事务D进来对数据进行如下操作" class="headerlink" title="ClientD:当事务B执行完s1语句的查询之后,就有事务D进来对数据进行如下操作:"></a>ClientD:当事务B执行完s1语句的查询之后,就有事务D进来对数据进行如下操作:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">delete from student where id = 1;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><img src="http://106.15.204.187:8888/group1/M00/00/00/rBEKH12f6pGAEkTZAAAyrSxeLys166.png" style="zoom: 50%;"><p>当执行完这个语句之后,由于当前事务id为4,所以在所修改的语句中定义删除ID为当前事务ID;所以在在事务B执行s2查询语句的时候就由于当前事务版本号为2,所以无法看到事务版本号为4的这个数据;</p><p>ClientE:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">update student set name = &apos;l&apos; where id =  3;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="update的操作需要进行两步操作"><a href="#update的操作需要进行两步操作" class="headerlink" title="update的操作需要进行两步操作:"></a>update的操作需要进行两步操作:</h3><h3 id="1-读取读取出原来的行数据-并且加上锁"><a href="#1-读取读取出原来的行数据-并且加上锁" class="headerlink" title="1.读取读取出原来的行数据,并且加上锁;"></a>1.读取读取出原来的行数据,并且加上锁;</h3><h3 id="2-修改当前数据-并且将原来的行数据的删除时间定义为当前事务ID-将要执行修改的数据的事务ID为当前事务的ID-后面有证明为什么不是当前系统版本号-而是当前事务ID-然后原来的行数据就会写入到undo-log里面-当其他事务要查询这条数据时-先从read-view中查到可查询的事务ID然后该事务ID的-然后存在一个回滚指针指向undo-log修改前的行数据"><a href="#2-修改当前数据-并且将原来的行数据的删除时间定义为当前事务ID-将要执行修改的数据的事务ID为当前事务的ID-后面有证明为什么不是当前系统版本号-而是当前事务ID-然后原来的行数据就会写入到undo-log里面-当其他事务要查询这条数据时-先从read-view中查到可查询的事务ID然后该事务ID的-然后存在一个回滚指针指向undo-log修改前的行数据" class="headerlink" title="2.修改当前数据,并且将原来的行数据的删除时间定义为当前事务ID,将要执行修改的数据的事务ID为当前事务的ID(后面有证明为什么不是当前系统版本号,而是当前事务ID);然后原来的行数据就会写入到undo.log里面,当其他事务要查询这条数据时,先从read_view中查到可查询的事务ID然后该事务ID的,然后存在一个回滚指针指向undo.log修改前的行数据."></a>2.修改当前数据,并且将原来的行数据的删除时间定义为当前事务ID,将要执行修改的数据的事务ID为当前事务的ID(后面有证明为什么不是当前系统版本号,而是当前事务ID);然后原来的行数据就会写入到undo.log里面,当其他事务要查询这条数据时,先从read_view中查到可查询的事务ID然后该事务ID的,然后存在一个回滚指针指向undo.log修改前的行数据.</h3><img src="http://106.15.204.187:8888/group1/M00/00/00/rBEKH12f9RmAR9wWAABCkDz2mfQ080.png" style="zoom: 50%;"><h3 id="一致性非锁定读"><a href="#一致性非锁定读" class="headerlink" title="一致性非锁定读"></a>一致性非锁定读</h3><p>　　<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_consistent_read" target="_blank" rel="noopener">consistent read</a> （一致性读），InnoDB用多版本来提供查询数据库在某个时间点的快照。如果隔离级别是REPEATABLE READ，那么在同一个事务中的所有一致性读都读的是事务中第一个这样的读读到的快照；如果是READ COMMITTED，那么一个事务中的每一个一致性读都会读到它自己刷新的快照版本。Consistent read（一致性读）是READ COMMITTED和REPEATABLE READ隔离级别下普通SELECT语句默认的模式。一致性读不会给它所访问的表加任何形式的锁，因此其它事务可以同时并发的修改它们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基于Innodb存储引擎的快照读与当前读分析&quot;&gt;&lt;a href=&quot;#基于Innodb存储引擎的快照读与当前读分析&quot; class=&quot;headerlink&quot; title=&quot;基于Innodb存储引擎的快照读与当前读分析:&quot;&gt;&lt;/a&gt;基于Innodb存储引擎的快照读与当前
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://Homeofpan.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://Homeofpan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql的InnoDb引擎的索引原理</title>
    <link href="http://Homeofpan.github.io/2019/10/08/Mysql%E7%9A%84InnoDb%E5%BC%95%E6%93%8E%E7%9A%84%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/"/>
    <id>http://Homeofpan.github.io/2019/10/08/Mysql的InnoDb引擎的索引原理/</id>
    <published>2019-10-08T12:25:50.000Z</published>
    <updated>2019-10-08T15:34:05.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="索引-聚集索引和非聚集索引"><a href="#索引-聚集索引和非聚集索引" class="headerlink" title="索引:聚集索引和非聚集索引"></a>索引:聚集索引和非聚集索引</h3><h4 id="聚集索引-在InnoDb中-Mysql默认是按照表的主键来按顺序的存储数据-通过表的主键作为聚集索引-构造一颗索引的B-树-叶子节点的存放的数据就是表的行数据-因为聚集索引是按照B-数来排序的-所以主键在一个表中只能存放一个-InnoBd的默认聚集索引就是主键"><a href="#聚集索引-在InnoDb中-Mysql默认是按照表的主键来按顺序的存储数据-通过表的主键作为聚集索引-构造一颗索引的B-树-叶子节点的存放的数据就是表的行数据-因为聚集索引是按照B-数来排序的-所以主键在一个表中只能存放一个-InnoBd的默认聚集索引就是主键" class="headerlink" title="聚集索引: 在InnoDb中,Mysql默认是按照表的主键来按顺序的存储数据.通过表的主键作为聚集索引,构造一颗索引的B+树,叶子节点的存放的数据就是表的行数据.因为聚集索引是按照B+数来排序的,所以主键在一个表中只能存放一个.InnoBd的默认聚集索引就是主键."></a>聚集索引: 在InnoDb中,Mysql默认是按照表的主键来按顺序的存储数据.通过表的主键作为聚集索引,构造一颗索引的B+树,叶子节点的存放的数据就是表的行数据.因为聚集索引是按照B+数来排序的,所以主键在一个表中只能存放一个.InnoBd的默认聚集索引就是主键.</h4><blockquote><p>如果没有设置主键?</p><p>Innodb还会去找表中是否存在唯一标识的表的字段?</p><p>如果都没有的话,innodb就会存在三个隐藏列:</p><p>DB_ROW_ID做为隐藏的主键……</p></blockquote><p>也就是说Innodb中是一定保证存在主键</p><blockquote><p>自增主键和uuid作为主键的区别，由于主键使用了聚簇索引，如果主键是自增id,那么对应的数据一定也是相邻地存放在磁盘上的，写入性能比较高。如果是uuid的形式，频繁的插入会使innodb频繁地移动磁盘块，写入性能就比较低了。</p></blockquote><h3 id="聚集索引的原理"><a href="#聚集索引的原理" class="headerlink" title="聚集索引的原理:"></a>聚集索引的原理:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| id | user_name | user_phone  |</span><br><span class="line">| 1  | ss        | 455         |</span><br><span class="line">| 3  | pan       | 12345678911 |</span><br><span class="line">| 5  | sb        | 45678912345 |</span><br></pre></td></tr></table></figure><h3 id="非聚集索引的原理"><a href="#非聚集索引的原理" class="headerlink" title="非聚集索引的原理:"></a>非聚集索引的原理:</h3><p>运行下面的sql语句建立索引:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index index_name on user(user_name);</span><br></pre></td></tr></table></figure><h5 id="为表的其他字段建立索引-并且非聚集索引的B-树的叶子节点都不是真实的存放在磁盘中的数据-只存放着主键索引-聚集索引-和该索引字段的数据-查找该表的所有数据时-如果像一下的sql语句查看"><a href="#为表的其他字段建立索引-并且非聚集索引的B-树的叶子节点都不是真实的存放在磁盘中的数据-只存放着主键索引-聚集索引-和该索引字段的数据-查找该表的所有数据时-如果像一下的sql语句查看" class="headerlink" title="为表的其他字段建立索引,并且非聚集索引的B+树的叶子节点都不是真实的存放在磁盘中的数据,只存放着主键索引(聚集索引)和该索引字段的数据;查找该表的所有数据时,如果像一下的sql语句查看:"></a>为表的其他字段建立索引,并且非聚集索引的B+树的叶子节点都不是真实的存放在磁盘中的数据,只存放着主键索引(聚集索引)和该索引字段的数据;查找该表的所有数据时,如果像一下的sql语句查看:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where user_name = &apos;pan&apos;;</span><br></pre></td></tr></table></figure><p>那就先从user_name建立的索引B+数开始索引,当遍历到user_name=’pan’的时候,就会找到它对应的主键索引值,用该主键索引值从聚集索引B+树中查看出磁盘中真实所放的行数据.</p><h3 id="但是只是查看该索引值的时候-就会直接返回B-树中的值"><a href="#但是只是查看该索引值的时候-就会直接返回B-树中的值" class="headerlink" title="但是只是查看该索引值的时候:就会直接返回B+树中的值"></a>但是只是查看该索引值的时候:就会直接返回B+树中的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user_name from user where user_name = &apos;pan&apos;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;索引-聚集索引和非聚集索引&quot;&gt;&lt;a href=&quot;#索引-聚集索引和非聚集索引&quot; class=&quot;headerlink&quot; title=&quot;索引:聚集索引和非聚集索引&quot;&gt;&lt;/a&gt;索引:聚集索引和非聚集索引&lt;/h3&gt;&lt;h4 id=&quot;聚集索引-在InnoDb中-Mysql默认
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://Homeofpan.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://Homeofpan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>spring容器初始化</title>
    <link href="http://Homeofpan.github.io/2019/10/08/spring%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://Homeofpan.github.io/2019/10/08/spring容器初始化/</id>
    <published>2019-10-08T08:02:52.000Z</published>
    <updated>2019-10-09T06:13:34.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring容器的初始化过程"><a href="#Spring容器的初始化过程" class="headerlink" title="Spring容器的初始化过程"></a>Spring容器的初始化过程</h3><p><img src="//Homeofpan.github.io/2019/10/08/spring容器初始化/D:%5Cblog%5Csource_posts%5Cspring%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%5C1.jpg" alt="流程图"></p><h4 id="1-执行构造函数-实例化一个容器对象"><a href="#1-执行构造函数-实例化一个容器对象" class="headerlink" title="1.执行构造函数,实例化一个容器对象:"></a>1.执行构造函数,实例化一个容器对象:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建容器对象,并且从spring的所有配置文件中加载definitions</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh, ApplicationContext parent)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="comment">//使用parent创建</span></span><br><span class="line"><span class="keyword">super</span>(parent);</span><br><span class="line">    <span class="comment">//将spring有关的配置文件都设置到configLocations</span></span><br><span class="line">setConfigLocations(configLocations);</span><br><span class="line"><span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">            <span class="comment">//刷新容器</span></span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.刷新创建的ClasspathXmlApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// 1.Prepare this context for refreshing.刷新容器前的预处理</span></span><br><span class="line">            <span class="comment">//设置容器的启动时间和加载自定义的一些数据配置文件:*.properties.......</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">            <span class="comment">// 2.</span></span><br><span class="line">            <span class="comment">//   (a)创建ioc容器 (DefaultListableBeanFactory)</span></span><br><span class="line">            <span class="comment">//    (b)加载xml的信息 (最后转存为Document对象)</span></span><br><span class="line">            <span class="comment">//    (c)对Document对象解析,在这里完成对BeanDefinition的注册和加载</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">            <span class="comment">// 3.对IOC容器的一些预处理</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">                <span class="comment">// STEP 4： 允许在AbstractApplicationContext的子类中对BeanFactory进行后置处理，                        //      postProcessBeanFactory()这个方法是个空实现。</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">                 <span class="comment">//STEP 5： 调用BeanFactoryPostProcessor后置处理器处理BeanFactory的实例                                     （BeanDefinition）</span></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line"><span class="comment">//STEP6  1.注册BeanPostProcessor后置处理器</span></span><br><span class="line">                 <span class="comment">//  2.b）BeanPostProcessors后置处理器用于拦截bean的创建，对创建后的bean实例进行处理</span></span><br><span class="line">               registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">                <span class="comment">//STEP7 :初始化一些消息资源</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">                <span class="comment">// STEP 8： </span></span><br><span class="line">                <span class="comment">//      a)  初始化应用事件广播器</span></span><br><span class="line">                <span class="comment">//      b)  表明Spring内部基于事件机制</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">                <span class="comment">//STEP9</span></span><br><span class="line">                <span class="comment">//初始化一些特殊的bean</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">                <span class="comment">//STEP10 :</span></span><br><span class="line">                <span class="comment">// 遍历寻找listener并且注册</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">                <span class="comment">//STEP11</span></span><br><span class="line">                <span class="comment">//       实例化剩余(非实例化的)bean</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">                <span class="comment">//STEP12 : 完成容器的刷新,并且发布对应的事件</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset 'active' flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Beanfactory的源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br></pre></td></tr></table></figure><h3 id="进入AbstractApplication的obtainFreshBeanFactory-的方法"><a href="#进入AbstractApplication的obtainFreshBeanFactory-的方法" class="headerlink" title="进入AbstractApplication的obtainFreshBeanFactory()的方法:"></a>进入AbstractApplication的obtainFreshBeanFactory()的方法:</h3><h3 id="用于创建一个新的Ioc容器-这个Ioc容器就是DefaultListableBeanFactory"><a href="#用于创建一个新的Ioc容器-这个Ioc容器就是DefaultListableBeanFactory" class="headerlink" title="用于创建一个新的Ioc容器,这个Ioc容器就是DefaultListableBeanFactory"></a>用于创建一个新的Ioc容器,这个Ioc容器就是DefaultListableBeanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过该方法刷新BeanFactory,并且创建一个ioc容器</span></span><br><span class="line">refreshBeanFactory();</span><br><span class="line">         <span class="comment">//获取refreshBeanFactory()创建的ioc容器</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进入AbstractApplication的refreshBeanFactory-方法中"><a href="#进入AbstractApplication的refreshBeanFactory-方法中" class="headerlink" title="进入AbstractApplication的refreshBeanFactory()方法中:"></a>进入AbstractApplication的refreshBeanFactory()方法中:</h3><h4 id="初始化一个BeanFactory"><a href="#初始化一个BeanFactory" class="headerlink" title="初始化一个BeanFactory"></a>初始化一个BeanFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This implementation performs an actual refresh of this context's underlying</span></span><br><span class="line"><span class="comment"> * bean factory, shutting down the previous bean factory (if any) and</span></span><br><span class="line"><span class="comment"> * initializing a fresh bean factory for the next phase of the context's lifecycle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">       <span class="comment">//判断是否已经存在BeanFactory</span></span><br><span class="line"><span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">       <span class="comment">//销毁上一个BeanFactory</span></span><br><span class="line">destroyBeans();</span><br><span class="line">       <span class="comment">//并且关闭    </span></span><br><span class="line">closeBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个BeanFactory的实例(DefaultListableBeanFactory)</span></span><br><span class="line">DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">beanFactory.setSerializationId(getId());</span><br><span class="line">           <span class="comment">//设置BeanFactory的属性:是否允许BeanDefinition的覆盖和循环依赖</span></span><br><span class="line">customizeBeanFactory(beanFactory);</span><br><span class="line">           <span class="comment">//加载spring的xml文件的BeanDefinition</span></span><br><span class="line">loadBeanDefinitions(beanFactory);</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载BeanDefinition流程分析"><a href="#加载BeanDefinition流程分析" class="headerlink" title="加载BeanDefinition流程分析:"></a>加载BeanDefinition流程分析:</h3><h3 id="进入AbstractXmlApplicationContext的loadBeanDefinitions-beanFactory-方法"><a href="#进入AbstractXmlApplicationContext的loadBeanDefinitions-beanFactory-方法" class="headerlink" title="进入AbstractXmlApplicationContext的loadBeanDefinitions(beanFactory)方法:"></a>进入AbstractXmlApplicationContext的loadBeanDefinitions(beanFactory)方法:</h3><h4 id="gt-创建一个XmlBeanDefinitionReader-真正地去完成BeanDefinition的注册和加载"><a href="#gt-创建一个XmlBeanDefinitionReader-真正地去完成BeanDefinition的注册和加载" class="headerlink" title="&gt;创建一个XmlBeanDefinitionReader,真正地去完成BeanDefinition的注册和加载"></a>&gt;创建一个XmlBeanDefinitionReader,真正地去完成BeanDefinition的注册和加载</h4><h4 id="gt-配置XmlBeanDefinitionReader的属性"><a href="#gt-配置XmlBeanDefinitionReader的属性" class="headerlink" title="&gt;配置XmlBeanDefinitionReader的属性"></a>&gt;配置XmlBeanDefinitionReader的属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Loads the bean definitions via an XmlBeanDefinitionReader.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #initBeanDefinitionReader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #loadBeanDefinitions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory</span></span><br><span class="line">        <span class="comment">//为工厂创建一个读取xml的一个reader</span></span><br><span class="line">XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the bean definition reader with this context's</span></span><br><span class="line"><span class="comment">// resource loading environment.</span></span><br><span class="line">         <span class="comment">//设置reader的一些环境属性</span></span><br><span class="line">beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line"><span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">         <span class="comment">//允许自定义的reader来读取xml的BeanDefinition</span></span><br><span class="line">initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">         <span class="comment">//委托xml阅读器去加载xml的BeanDefinitions信息</span></span><br><span class="line">loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException,      IOException </span>&#123;</span><br><span class="line">         <span class="comment">//获取资源的位置</span></span><br><span class="line">         <span class="comment">//getConfigResources是一个空实现,需要子类去实现</span></span><br><span class="line">         <span class="comment">//获取ClasspathXMLApplicationContext的父类AbstractXmlApplicationContext的</span></span><br><span class="line">         <span class="comment">//配置文件信息,默认返回null</span></span><br><span class="line">Resource[] configResources = getConfigResources();</span><br><span class="line"><span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">reader.loadBeanDefinitions(configResources);</span><br><span class="line">&#125;</span><br><span class="line">         <span class="comment">//如果用户指定了spring的xml配置文件的位置就获取用户的自定义配置文件</span></span><br><span class="line">         <span class="comment">//否则就加载父类指定的默认加载位置,默认返回null</span></span><br><span class="line">String[] configLocations = getConfigLocations();</span><br><span class="line"><span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//该方法的参数就是我们在new一个容器实例传入的一个参数,代表spring的xml配置文件的地方</span></span><br><span class="line">             <span class="comment">//该方法真正地去读取xml的beanDefinition的信息,并且返回读取的一个计数值,来表示读取了多少个</span></span><br><span class="line">             <span class="comment">//位置的xml</span></span><br><span class="line">reader.loadBeanDefinitions(configLocations);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loadBeanDefinitions最终来到了XmlBeanDefinitionReader的doLoadBeanDefinitions方法："><a href="#loadBeanDefinitions最终来到了XmlBeanDefinitionReader的doLoadBeanDefinitions方法：" class="headerlink" title="loadBeanDefinitions最终来到了XmlBeanDefinitionReader的doLoadBeanDefinitions方法："></a>loadBeanDefinitions最终来到了<strong>XmlBeanDefinitionReader</strong>的doLoadBeanDefinitions方法：</h3><h3 id="gt-对XML文件进行解析"><a href="#gt-对XML文件进行解析" class="headerlink" title="&gt;对XML文件进行解析"></a>&gt;对XML文件进行解析</h3><h3 id="gt-完成BeanDefinition对象的加载与注册"><a href="#gt-完成BeanDefinition对象的加载与注册" class="headerlink" title="&gt;完成BeanDefinition对象的加载与注册"></a>&gt;完成BeanDefinition对象的加载与注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//将XML转换成document对象</span></span><br><span class="line">Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">           <span class="comment">//BeanDefinition对象的加载与注册</span></span><br><span class="line"><span class="keyword">return</span> registerBeanDefinitions(doc, resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<strong>XmlBeanDefinitionReader</strong><code>registerBeanDefinitions</code></p><ul><li>创建<strong>DefaultBeanDefinitionDocumentReader</strong>用来解析Document对象。</li><li>获得容器中已注册的BeanDefinition数量</li><li>委托给<strong>DefaultBeanDefinitionDocumentReader</strong>来完成BeanDefinition的加载、注册工作。</li><li>统计新注册的BeanDefinition数量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span>            BeanDefinitionStoreException </span>&#123;</span><br><span class="line">         <span class="comment">//创建一个BeanDefinitionDocumentReader来解析Document对象的BeanDefinition信息</span></span><br><span class="line">BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">        <span class="comment">//获取容器已经存在的BeanDefinition的数量</span></span><br><span class="line"><span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">        <span class="comment">//注册</span></span><br><span class="line">documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">        <span class="comment">//返回注册后的容器中新增的BeanDefintion的个数</span></span><br><span class="line"><span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>进入<strong>DefaultBeanDefinitionDocumentReader</strong></p><ul><li>获得Document的根元素<beans>标签</beans></li><li>真正实现BeanDefinition解析和注册工作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">logger.debug(<span class="string">"Loading bean definitions"</span>);</span><br><span class="line">        <span class="comment">//从document对象中获取&lt;bean&gt;的标签</span></span><br><span class="line">Element root = doc.getDocumentElement();</span><br><span class="line">        <span class="comment">//对这些标签的真正注册和解析</span></span><br><span class="line">doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接下来就是解析…-的一些标签的过程-源码省略"><a href="#接下来就是解析…-的一些标签的过程-源码省略" class="headerlink" title="接下来就是解析….的一些标签的过程(源码省略):"></a>接下来就是解析<bean>….的一些标签的过程(源码省略):</bean></h3><h4 id="gt-1-从根标签开始遍历所有的标签"><a href="#gt-1-从根标签开始遍历所有的标签" class="headerlink" title="&gt; 1.从根标签开始遍历所有的标签"></a>&gt; 1.从根标签开始遍历所有的标签</h4><h4 id="gt-2-如果存在默认的标签-…-的标签就进行解析"><a href="#gt-2-如果存在默认的标签-…-的标签就进行解析" class="headerlink" title="&gt; 2.如果存在默认的标签(…)的标签就进行解析"></a>&gt; 2.如果存在默认的标签(<bean>…)的标签就进行解析</bean></h4><h4 id="gt-3-否则就去解析自定义的标签"><a href="#gt-3-否则就去解析自定义的标签" class="headerlink" title="&gt; 3.否则就去解析自定义的标签"></a>&gt; 3.否则就去解析自定义的标签</h4><h4 id="gt-4-解析标签里面的所有属性-id-name-class…"><a href="#gt-4-解析标签里面的所有属性-id-name-class…" class="headerlink" title="&gt;  4.解析标签里面的所有属性(id,name,class….)"></a>&gt;  4.解析<bean>标签里面的所有属性(id,name,class….)</bean></h4><h3 id="实例化剩余的-非懒加载的-bean"><a href="#实例化剩余的-非懒加载的-bean" class="headerlink" title="实例化剩余的(非懒加载的)bean"></a>实例化剩余的(非懒加载的)bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line"><span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">beanFactory.setConversionService(</span><br><span class="line">beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">getBean(weaverAwareName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">        <span class="comment">//重点方法:实例化容器剩余(非懒加载的)bean,并且ioc,DI和AOP都发生在这个方法里面</span></span><br><span class="line">beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring容器的初始化过程&quot;&gt;&lt;a href=&quot;#Spring容器的初始化过程&quot; class=&quot;headerlink&quot; title=&quot;Spring容器的初始化过程&quot;&gt;&lt;/a&gt;Spring容器的初始化过程&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;//Homeofpan.
      
    
    </summary>
    
    
      <category term="ssm" scheme="http://Homeofpan.github.io/categories/ssm/"/>
    
    
      <category term="spring" scheme="http://Homeofpan.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal源码分析</title>
    <link href="http://Homeofpan.github.io/2019/10/05/ThreadLocal%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://Homeofpan.github.io/2019/10/05/ThreadLocal源码分析/</id>
    <published>2019-10-05T09:30:51.000Z</published>
    <updated>2019-10-05T10:03:13.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Threadlocal的源码分析"><a href="#Threadlocal的源码分析" class="headerlink" title="Threadlocal的源码分析"></a>Threadlocal的源码分析</h3><p>首先ThreadLocal官网给出的定义是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** This class provides thread-local variables.</span></span><br><span class="line"><span class="comment">*These variables differ from * their normal counterparts in that each thread that accesses one (via its * &#123;<span class="doctag">@code</span> get&#125; or &#123;<span class="doctag">@code</span> set&#125; method) has its own, independently initialized * copy of the variable.</span></span><br><span class="line"><span class="comment">*&#123;<span class="doctag">@code</span> ThreadLocal&#125; instances are typically private * static fields in classes that wish to associate state with a thread (e.g., * a user ID or Transaction ID).</span></span><br></pre></td></tr></table></figure><p>意思是这个类时提供给每一个线程的一个变量,每个线程存放在ThreadLocal中的变量都是独立的,不能被其他线程所访问.</p><h3 id="set-方法的源码分析"><a href="#set-方法的源码分析" class="headerlink" title="set()方法的源码分析"></a>set()方法的源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the current thread's copy of this thread-local variable</span></span><br><span class="line"><span class="comment"> * to the specified value.  Most subclasses will have no need to</span></span><br><span class="line"><span class="comment"> * override this method, relying solely on the &#123;<span class="doctag">@link</span> #initialValue&#125;</span></span><br><span class="line"><span class="comment"> * method to set the values of thread-locals.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to be stored in the current thread's copy of</span></span><br><span class="line"><span class="comment"> *        this thread-local.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    获取ThreadLocal中的内部类的map</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">//判断获取的map是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    <span class="comment">//如果存在就直接以当前ThreadLocal为key,value为value插入map</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="comment">//否则创建一个map</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set方法实际执行的是Threadlocal里面的一个内部类的set方法"><a href="#set方法实际执行的是Threadlocal里面的一个内部类的set方法" class="headerlink" title="set方法实际执行的是Threadlocal里面的一个内部类的set方法"></a>set方法实际执行的是Threadlocal里面的一个内部类的set方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//ThreadLocalMap的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We don't use a fast path as with get() because it is at</span></span><br><span class="line">    <span class="comment">// least as common to use set() to create new entries as</span></span><br><span class="line">    <span class="comment">// it is to replace existing ones, in which case, a fast</span></span><br><span class="line">    <span class="comment">// path would fail more often than not.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Entry键值对数组</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="comment">//获取数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环遍历找到对应的ThreadLocal</span></span><br><span class="line">    <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果找到该key,就将新的value进行覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有找到的话,,就直接将新的key,value插入覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//调用该方法进行对原来的key= null的value进行清除,有利于Gc清除</span></span><br><span class="line">            replaceStaleEntry(key, value, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果超过了该Entry[]的size;</span></span><br><span class="line">    tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">    <span class="comment">//长度++</span></span><br><span class="line">    <span class="keyword">int</span> sz = ++size;</span><br><span class="line">    <span class="comment">//需要重新获取哈希</span></span><br><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">        rehash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当存放的Entry数组的size满了之后就要执行rehash-这里的逻辑"><a href="#当存放的Entry数组的size满了之后就要执行rehash-这里的逻辑" class="headerlink" title="当存放的Entry数组的size满了之后就要执行rehash()这里的逻辑"></a>当存放的Entry数组的size满了之后就要执行rehash()这里的逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Re-pack and/or re-size the table. First scan the entire</span></span><br><span class="line"><span class="comment"> * table removing stale entries. If this doesn't sufficiently</span></span><br><span class="line"><span class="comment"> * shrink the size of the table, double the table size.</span></span><br><span class="line"><span class="comment"> *先对该table进行一次旧数据的清除,如果清除完成之后还是超过threshold值</span></span><br><span class="line"><span class="comment"> *则将重新调整为原来的两倍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expungeStaleEntries(); <span class="comment">//清除旧数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use lower threshold for doubling to avoid hysteresis</span></span><br><span class="line">    <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">        resize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当进行完上面的方法之后-就要进行Entry-数组的扩容"><a href="#当进行完上面的方法之后-就要进行Entry-数组的扩容" class="headerlink" title="当进行完上面的方法之后,就要进行Entry[]数组的扩容"></a>当进行完上面的方法之后,就要进行Entry[]数组的扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Double the capacity of the table.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Entry[] oldTab = table;</span><br><span class="line">     <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">     <span class="comment">//调整table长度为原来的两倍</span></span><br><span class="line">     <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</span><br><span class="line">     Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</span><br><span class="line">     <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//将原来table的Entry全部复制到newTable</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">         Entry e = oldTab[j];</span><br><span class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">             ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">             <span class="comment">//如果key为空,将其value设为null</span></span><br><span class="line">             <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">//获取哈希值</span></span><br><span class="line">                 <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">                 <span class="comment">//如果当前位置已经存放entry</span></span><br><span class="line">                 <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</span><br><span class="line">                     <span class="comment">//线性表往后查询,找到一个没有存放entry的位置h</span></span><br><span class="line">                     h = nextIndex(h, newLen);</span><br><span class="line">                 newTab[h] = e;</span><br><span class="line">                 count++;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//设置新的threadshold值</span></span><br><span class="line">     setThreshold(newLen);</span><br><span class="line">     <span class="comment">//重新设置当前entry[]已经存放数据的长度</span></span><br><span class="line">     size = count;</span><br><span class="line">     <span class="comment">//更新当前Entry[]</span></span><br><span class="line">     table = newTab;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="二-get方法的源码分析"><a href="#二-get方法的源码分析" class="headerlink" title="二.get方法的源码分析"></a>二.get方法的源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//get操作 ThreadMap中的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the value in the current thread's copy of this</span></span><br><span class="line"><span class="comment"> * thread-local variable.  If the variable has no value for the</span></span><br><span class="line"><span class="comment"> * current thread, it is first initialized to the value returned</span></span><br><span class="line"><span class="comment"> * by an invocation of the &#123;<span class="doctag">@link</span> #initialValue&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the current thread's value of this thread-local</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//获取当前的map</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//根据当前threadLocal的对象,获取Entry的对象</span></span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="comment">//如果不为空,则获取对应的值,并且返回</span></span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当map为空和e为空都会进入初始化方法</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *根据key获取entry</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//获取哈希值,并计算出存放的位置</span></span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">            Entry e = table[i];</span><br><span class="line">            <span class="comment">//存在Entry就返回,并且entry的key为所需要的key</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *循环查找table数组的不为null的entry,并且判断查出来的entry是否是所查找的</span></span><br><span class="line"><span class="comment">            *直到没找到就返回null</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">                <span class="comment">//再次进行检查</span></span><br><span class="line">                <span class="keyword">if</span> (k == key)</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">//删除当前数组下标的entry</span></span><br><span class="line">                    expungeStaleEntry(i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">//可能原来这个key位置被其他key占用了,避免查看错误,继续递增的找下去</span></span><br><span class="line">                    i = nextIndex(i, len);</span><br><span class="line">                e = tab[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果该table的位置不存在entry则直接返回null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 当map不存在时,创建一个map</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化的value值为null</span></span><br><span class="line">        T value = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="comment">//对当前超线程的map再进一步判断,防止map已经创建了</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">         <span class="comment">//当map不为空才执行该方法</span></span><br><span class="line">         <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">             m.remove(<span class="keyword">this</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//循环遍历与目标可能一样的entry</span></span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">                 e != <span class="keyword">null</span>;</span><br><span class="line">                 e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.get() == key) &#123;</span><br><span class="line">                    <span class="comment">//调用Reference的clear方法</span></span><br><span class="line">                    <span class="comment">//原理是将key值为空,利用gc进行回收</span></span><br><span class="line">                    e.clear();</span><br><span class="line">                    <span class="comment">//删除对应的下标的entry数据</span></span><br><span class="line">                    expungeStaleEntry(i);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Threadlocal的源码分析&quot;&gt;&lt;a href=&quot;#Threadlocal的源码分析&quot; class=&quot;headerlink&quot; title=&quot;Threadlocal的源码分析&quot;&gt;&lt;/a&gt;Threadlocal的源码分析&lt;/h3&gt;&lt;p&gt;首先ThreadLocal官
      
    
    </summary>
    
    
    
      <category term="java并发" scheme="http://Homeofpan.github.io/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://Homeofpan.github.io/2019/10/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://Homeofpan.github.io/2019/10/05/我的第一篇文章/</id>
    <published>2019-10-05T07:12:26.000Z</published>
    <updated>2019-10-05T09:06:07.510Z</updated>
    
    <content type="html"><![CDATA[<h4 id="大家好"><a href="#大家好" class="headerlink" title="大家好"></a>大家好</h4><h5 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.out.println(<span class="string">"sssss"</span>);</span><br></pre></td></tr></table></figure><p>##参考文献</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;大家好&quot;&gt;&lt;a href=&quot;#大家好&quot; class=&quot;headerlink&quot; title=&quot;大家好&quot;&gt;&lt;/a&gt;大家好&lt;/h4&gt;&lt;h5 id=&quot;标题二&quot;&gt;&lt;a href=&quot;#标题二&quot; class=&quot;headerlink&quot; title=&quot;标题二&quot;&gt;&lt;/a&gt;标题二&lt;/h
      
    
    </summary>
    
    
      <category term="Testing" scheme="http://Homeofpan.github.io/categories/Testing/"/>
    
    
      <category term="java" scheme="http://Homeofpan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Homeofpan.github.io/2019/10/05/hello-world/"/>
    <id>http://Homeofpan.github.io/2019/10/05/hello-world/</id>
    <published>2019-10-05T07:01:28.652Z</published>
    <updated>2019-10-05T07:01:28.656Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
